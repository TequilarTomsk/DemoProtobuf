// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ExtensAnimal.pb.h"

@implementation ExtensAnimalRoot
static id<PBExtensionField> Cat_animalCat = nil;
static id<PBExtensionField> Dog_animalDog = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ExtensAnimalRoot class]) {
    Cat_animalCat =
      [[PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[ExtensAnimal class]
                                       fieldNumber:100
                                      defaultValue:[Cat defaultInstance]
                               messageOrGroupClass:[Cat class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO] retain];
    Dog_animalDog =
      [[PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[ExtensAnimal class]
                                       fieldNumber:101
                                      defaultValue:[Dog defaultInstance]
                               messageOrGroupClass:[Dog class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO] retain];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:Cat_animalCat];
  [registry addExtension:Dog_animalDog];
}
@end

@interface ExtensAnimal ()
@property (retain) NSString* name;
@end

@implementation ExtensAnimal

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (void) dealloc {
  self.name = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
  }
  return self;
}
static ExtensAnimal* defaultExtensAnimalInstance = nil;
+ (void) initialize {
  if (self == [ExtensAnimal class]) {
    defaultExtensAnimalInstance = [[ExtensAnimal alloc] init];
  }
}
+ (ExtensAnimal*) defaultInstance {
  return defaultExtensAnimalInstance;
}
- (ExtensAnimal*) defaultInstance {
  return defaultExtensAnimalInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.extensionsAreInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  [self writeExtensionsToCodedOutputStream:output
                                      from:100
                                        to:201];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  size += [self extensionsSerializedSize];
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ExtensAnimal*) parseFromData:(NSData*) data {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromData:data] build];
}
+ (ExtensAnimal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ExtensAnimal*) parseFromInputStream:(NSInputStream*) input {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromInputStream:input] build];
}
+ (ExtensAnimal*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeDelimitedFromInputStream:input] build];
}
+ (ExtensAnimal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ExtensAnimal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromCodedInputStream:input] build];
}
+ (ExtensAnimal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ExtensAnimal*)[[[ExtensAnimal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ExtensAnimal_Builder*) builder {
  return [[[ExtensAnimal_Builder alloc] init] autorelease];
}
+ (ExtensAnimal_Builder*) builderWithPrototype:(ExtensAnimal*) prototype {
  return [[ExtensAnimal builder] mergeFrom:prototype];
}
- (ExtensAnimal_Builder*) builder {
  return [ExtensAnimal builder];
}
@end

@interface ExtensAnimal_Builder()
@property (retain) ExtensAnimal* result;
@end

@implementation ExtensAnimal_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ExtensAnimal alloc] init] autorelease];
  }
  return self;
}
- (PBExtendableMessage*) internalGetResult {
  return result;
}
- (ExtensAnimal_Builder*) clear {
  self.result = [[[ExtensAnimal alloc] init] autorelease];
  return self;
}
- (ExtensAnimal_Builder*) clone {
  return [ExtensAnimal builderWithPrototype:result];
}
- (ExtensAnimal*) defaultInstance {
  return [ExtensAnimal defaultInstance];
}
- (ExtensAnimal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ExtensAnimal*) buildPartial {
  ExtensAnimal* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ExtensAnimal_Builder*) mergeFrom:(ExtensAnimal*) other {
  if (other == [ExtensAnimal defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  [self mergeExtensionFields:other];
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ExtensAnimal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ExtensAnimal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ExtensAnimal_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ExtensAnimal_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
@end

@interface Cat ()
@property int32_t declawed;
@end

@implementation Cat

- (BOOL) hasDeclawed {
  return !!hasDeclawed_;
}
- (void) setHasDeclawed:(BOOL) value {
  hasDeclawed_ = !!value;
}
@synthesize declawed;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.declawed = 0;
  }
  return self;
}
+ (id<PBExtensionField>) animalCat {
  return Cat_animalCat;
}
static Cat* defaultCatInstance = nil;
+ (void) initialize {
  if (self == [Cat class]) {
    defaultCatInstance = [[Cat alloc] init];
  }
}
+ (Cat*) defaultInstance {
  return defaultCatInstance;
}
- (Cat*) defaultInstance {
  return defaultCatInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDeclawed) {
    [output writeUInt32:1 value:self.declawed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDeclawed) {
    size += computeUInt32Size(1, self.declawed);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Cat*) parseFromData:(NSData*) data {
  return (Cat*)[[[Cat builder] mergeFromData:data] build];
}
+ (Cat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Cat*)[[[Cat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Cat*) parseFromInputStream:(NSInputStream*) input {
  return (Cat*)[[[Cat builder] mergeFromInputStream:input] build];
}
+ (Cat*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (Cat*)[[[Cat builder] mergeDelimitedFromInputStream:input] build];
}
+ (Cat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Cat*)[[[Cat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Cat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Cat*)[[[Cat builder] mergeFromCodedInputStream:input] build];
}
+ (Cat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Cat*)[[[Cat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Cat_Builder*) builder {
  return [[[Cat_Builder alloc] init] autorelease];
}
+ (Cat_Builder*) builderWithPrototype:(Cat*) prototype {
  return [[Cat builder] mergeFrom:prototype];
}
- (Cat_Builder*) builder {
  return [Cat builder];
}
@end

@interface Cat_Builder()
@property (retain) Cat* result;
@end

@implementation Cat_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Cat alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Cat_Builder*) clear {
  self.result = [[[Cat alloc] init] autorelease];
  return self;
}
- (Cat_Builder*) clone {
  return [Cat builderWithPrototype:result];
}
- (Cat*) defaultInstance {
  return [Cat defaultInstance];
}
- (Cat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Cat*) buildPartial {
  Cat* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Cat_Builder*) mergeFrom:(Cat*) other {
  if (other == [Cat defaultInstance]) {
    return self;
  }
  if (other.hasDeclawed) {
    [self setDeclawed:other.declawed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Cat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Cat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setDeclawed:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDeclawed {
  return result.hasDeclawed;
}
- (int32_t) declawed {
  return result.declawed;
}
- (Cat_Builder*) setDeclawed:(int32_t) value {
  result.hasDeclawed = YES;
  result.declawed = value;
  return self;
}
- (Cat_Builder*) clearDeclawed {
  result.hasDeclawed = NO;
  result.declawed = 0;
  return self;
}
@end

@interface Dog ()
@property int32_t bonesBuried;
@end

@implementation Dog

- (BOOL) hasBonesBuried {
  return !!hasBonesBuried_;
}
- (void) setHasBonesBuried:(BOOL) value {
  hasBonesBuried_ = !!value;
}
@synthesize bonesBuried;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.bonesBuried = 0;
  }
  return self;
}
+ (id<PBExtensionField>) animalDog {
  return Dog_animalDog;
}
static Dog* defaultDogInstance = nil;
+ (void) initialize {
  if (self == [Dog class]) {
    defaultDogInstance = [[Dog alloc] init];
  }
}
+ (Dog*) defaultInstance {
  return defaultDogInstance;
}
- (Dog*) defaultInstance {
  return defaultDogInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBonesBuried) {
    [output writeUInt32:1 value:self.bonesBuried];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBonesBuried) {
    size += computeUInt32Size(1, self.bonesBuried);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Dog*) parseFromData:(NSData*) data {
  return (Dog*)[[[Dog builder] mergeFromData:data] build];
}
+ (Dog*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dog*)[[[Dog builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Dog*) parseFromInputStream:(NSInputStream*) input {
  return (Dog*)[[[Dog builder] mergeFromInputStream:input] build];
}
+ (Dog*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (Dog*)[[[Dog builder] mergeDelimitedFromInputStream:input] build];
}
+ (Dog*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dog*)[[[Dog builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Dog*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Dog*)[[[Dog builder] mergeFromCodedInputStream:input] build];
}
+ (Dog*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Dog*)[[[Dog builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Dog_Builder*) builder {
  return [[[Dog_Builder alloc] init] autorelease];
}
+ (Dog_Builder*) builderWithPrototype:(Dog*) prototype {
  return [[Dog builder] mergeFrom:prototype];
}
- (Dog_Builder*) builder {
  return [Dog builder];
}
@end

@interface Dog_Builder()
@property (retain) Dog* result;
@end

@implementation Dog_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Dog alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Dog_Builder*) clear {
  self.result = [[[Dog alloc] init] autorelease];
  return self;
}
- (Dog_Builder*) clone {
  return [Dog builderWithPrototype:result];
}
- (Dog*) defaultInstance {
  return [Dog defaultInstance];
}
- (Dog*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Dog*) buildPartial {
  Dog* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Dog_Builder*) mergeFrom:(Dog*) other {
  if (other == [Dog defaultInstance]) {
    return self;
  }
  if (other.hasBonesBuried) {
    [self setBonesBuried:other.bonesBuried];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Dog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Dog_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setBonesBuried:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBonesBuried {
  return result.hasBonesBuried;
}
- (int32_t) bonesBuried {
  return result.bonesBuried;
}
- (Dog_Builder*) setBonesBuried:(int32_t) value {
  result.hasBonesBuried = YES;
  result.bonesBuried = value;
  return self;
}
- (Dog_Builder*) clearBonesBuried {
  result.hasBonesBuried = NO;
  result.bonesBuried = 0;
  return self;
}
@end

