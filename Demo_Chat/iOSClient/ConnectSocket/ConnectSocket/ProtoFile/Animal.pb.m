// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Animal.pb.h"

@implementation AnimalRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AnimalRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Animal ()
@property Float64 aDouble;
@property Float32 aFloat;
@property int32_t aInt32;
@property int64_t aInt64;
@property int32_t aUint32;
@property int64_t aUint64;
@property int32_t aSint32;
@property int64_t aSint64;
@property int32_t aFixed32;
@property int64_t aFixed64;
@property int32_t aSfixed32;
@property int64_t aSfixed64;
@property BOOL aBool;
@property (retain) NSString* aString;
@property (retain) NSData* aBytes;
@property Animal_VERSION_CURRENT type;
@end

@implementation Animal

- (BOOL) hasADouble {
  return !!hasADouble_;
}
- (void) setHasADouble:(BOOL) value {
  hasADouble_ = !!value;
}
@synthesize aDouble;
- (BOOL) hasAFloat {
  return !!hasAFloat_;
}
- (void) setHasAFloat:(BOOL) value {
  hasAFloat_ = !!value;
}
@synthesize aFloat;
- (BOOL) hasAInt32 {
  return !!hasAInt32_;
}
- (void) setHasAInt32:(BOOL) value {
  hasAInt32_ = !!value;
}
@synthesize aInt32;
- (BOOL) hasAInt64 {
  return !!hasAInt64_;
}
- (void) setHasAInt64:(BOOL) value {
  hasAInt64_ = !!value;
}
@synthesize aInt64;
- (BOOL) hasAUint32 {
  return !!hasAUint32_;
}
- (void) setHasAUint32:(BOOL) value {
  hasAUint32_ = !!value;
}
@synthesize aUint32;
- (BOOL) hasAUint64 {
  return !!hasAUint64_;
}
- (void) setHasAUint64:(BOOL) value {
  hasAUint64_ = !!value;
}
@synthesize aUint64;
- (BOOL) hasASint32 {
  return !!hasASint32_;
}
- (void) setHasASint32:(BOOL) value {
  hasASint32_ = !!value;
}
@synthesize aSint32;
- (BOOL) hasASint64 {
  return !!hasASint64_;
}
- (void) setHasASint64:(BOOL) value {
  hasASint64_ = !!value;
}
@synthesize aSint64;
- (BOOL) hasAFixed32 {
  return !!hasAFixed32_;
}
- (void) setHasAFixed32:(BOOL) value {
  hasAFixed32_ = !!value;
}
@synthesize aFixed32;
- (BOOL) hasAFixed64 {
  return !!hasAFixed64_;
}
- (void) setHasAFixed64:(BOOL) value {
  hasAFixed64_ = !!value;
}
@synthesize aFixed64;
- (BOOL) hasASfixed32 {
  return !!hasASfixed32_;
}
- (void) setHasASfixed32:(BOOL) value {
  hasASfixed32_ = !!value;
}
@synthesize aSfixed32;
- (BOOL) hasASfixed64 {
  return !!hasASfixed64_;
}
- (void) setHasASfixed64:(BOOL) value {
  hasASfixed64_ = !!value;
}
@synthesize aSfixed64;
- (BOOL) hasABool {
  return !!hasABool_;
}
- (void) setHasABool:(BOOL) value {
  hasABool_ = !!value;
}
- (BOOL) aBool {
  return !!aBool_;
}
- (void) setABool:(BOOL) value {
  aBool_ = !!value;
}
- (BOOL) hasAString {
  return !!hasAString_;
}
- (void) setHasAString:(BOOL) value {
  hasAString_ = !!value;
}
@synthesize aString;
- (BOOL) hasABytes {
  return !!hasABytes_;
}
- (void) setHasABytes:(BOOL) value {
  hasABytes_ = !!value;
}
@synthesize aBytes;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (void) dealloc {
  self.aString = nil;
  self.aBytes = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.aDouble = 0;
    self.aFloat = 0;
    self.aInt32 = 0;
    self.aInt64 = 0L;
    self.aUint32 = 0;
    self.aUint64 = 0L;
    self.aSint32 = 0;
    self.aSint64 = 0L;
    self.aFixed32 = 0;
    self.aFixed64 = 0L;
    self.aSfixed32 = 0;
    self.aSfixed64 = 0L;
    self.aBool = NO;
    self.aString = @"";
    self.aBytes = [NSData data];
    self.type = Animal_VERSION_CURRENTVer1;
  }
  return self;
}
static Animal* defaultAnimalInstance = nil;
+ (void) initialize {
  if (self == [Animal class]) {
    defaultAnimalInstance = [[Animal alloc] init];
  }
}
+ (Animal*) defaultInstance {
  return defaultAnimalInstance;
}
- (Animal*) defaultInstance {
  return defaultAnimalInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasADouble) {
    [output writeDouble:1 value:self.aDouble];
  }
  if (self.hasAFloat) {
    [output writeFloat:2 value:self.aFloat];
  }
  if (self.hasAInt32) {
    [output writeInt32:3 value:self.aInt32];
  }
  if (self.hasAInt64) {
    [output writeInt64:4 value:self.aInt64];
  }
  if (self.hasAUint32) {
    [output writeUInt32:5 value:self.aUint32];
  }
  if (self.hasAUint64) {
    [output writeUInt64:6 value:self.aUint64];
  }
  if (self.hasASint32) {
    [output writeSInt32:7 value:self.aSint32];
  }
  if (self.hasASint64) {
    [output writeSInt64:8 value:self.aSint64];
  }
  if (self.hasAFixed32) {
    [output writeFixed32:9 value:self.aFixed32];
  }
  if (self.hasAFixed64) {
    [output writeFixed64:10 value:self.aFixed64];
  }
  if (self.hasASfixed32) {
    [output writeSFixed32:11 value:self.aSfixed32];
  }
  if (self.hasASfixed64) {
    [output writeSFixed64:12 value:self.aSfixed64];
  }
  if (self.hasABool) {
    [output writeBool:13 value:self.aBool];
  }
  if (self.hasAString) {
    [output writeString:14 value:self.aString];
  }
  if (self.hasABytes) {
    [output writeData:15 value:self.aBytes];
  }
  if (self.hasType) {
    [output writeEnum:16 value:self.type];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasADouble) {
    size += computeDoubleSize(1, self.aDouble);
  }
  if (self.hasAFloat) {
    size += computeFloatSize(2, self.aFloat);
  }
  if (self.hasAInt32) {
    size += computeInt32Size(3, self.aInt32);
  }
  if (self.hasAInt64) {
    size += computeInt64Size(4, self.aInt64);
  }
  if (self.hasAUint32) {
    size += computeUInt32Size(5, self.aUint32);
  }
  if (self.hasAUint64) {
    size += computeUInt64Size(6, self.aUint64);
  }
  if (self.hasASint32) {
    size += computeSInt32Size(7, self.aSint32);
  }
  if (self.hasASint64) {
    size += computeSInt64Size(8, self.aSint64);
  }
  if (self.hasAFixed32) {
    size += computeFixed32Size(9, self.aFixed32);
  }
  if (self.hasAFixed64) {
    size += computeFixed64Size(10, self.aFixed64);
  }
  if (self.hasASfixed32) {
    size += computeSFixed32Size(11, self.aSfixed32);
  }
  if (self.hasASfixed64) {
    size += computeSFixed64Size(12, self.aSfixed64);
  }
  if (self.hasABool) {
    size += computeBoolSize(13, self.aBool);
  }
  if (self.hasAString) {
    size += computeStringSize(14, self.aString);
  }
  if (self.hasABytes) {
    size += computeDataSize(15, self.aBytes);
  }
  if (self.hasType) {
    size += computeEnumSize(16, self.type);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Animal*) parseFromData:(NSData*) data {
  return (Animal*)[[[Animal builder] mergeFromData:data] build];
}
+ (Animal*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Animal*)[[[Animal builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Animal*) parseFromInputStream:(NSInputStream*) input {
  return (Animal*)[[[Animal builder] mergeFromInputStream:input] build];
}
+ (Animal*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (Animal*)[[[Animal builder] mergeDelimitedFromInputStream:input] build];
}
+ (Animal*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Animal*)[[[Animal builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Animal*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Animal*)[[[Animal builder] mergeFromCodedInputStream:input] build];
}
+ (Animal*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Animal*)[[[Animal builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Animal_Builder*) builder {
  return [[[Animal_Builder alloc] init] autorelease];
}
+ (Animal_Builder*) builderWithPrototype:(Animal*) prototype {
  return [[Animal builder] mergeFrom:prototype];
}
- (Animal_Builder*) builder {
  return [Animal builder];
}
@end

BOOL Animal_VERSION_CURRENTIsValidValue(Animal_VERSION_CURRENT value) {
  switch (value) {
    case Animal_VERSION_CURRENTVer1:
    case Animal_VERSION_CURRENTVer2:
      return YES;
    default:
      return NO;
  }
}
@interface Animal_Builder()
@property (retain) Animal* result;
@end

@implementation Animal_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Animal alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Animal_Builder*) clear {
  self.result = [[[Animal alloc] init] autorelease];
  return self;
}
- (Animal_Builder*) clone {
  return [Animal builderWithPrototype:result];
}
- (Animal*) defaultInstance {
  return [Animal defaultInstance];
}
- (Animal*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Animal*) buildPartial {
  Animal* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Animal_Builder*) mergeFrom:(Animal*) other {
  if (other == [Animal defaultInstance]) {
    return self;
  }
  if (other.hasADouble) {
    [self setADouble:other.aDouble];
  }
  if (other.hasAFloat) {
    [self setAFloat:other.aFloat];
  }
  if (other.hasAInt32) {
    [self setAInt32:other.aInt32];
  }
  if (other.hasAInt64) {
    [self setAInt64:other.aInt64];
  }
  if (other.hasAUint32) {
    [self setAUint32:other.aUint32];
  }
  if (other.hasAUint64) {
    [self setAUint64:other.aUint64];
  }
  if (other.hasASint32) {
    [self setASint32:other.aSint32];
  }
  if (other.hasASint64) {
    [self setASint64:other.aSint64];
  }
  if (other.hasAFixed32) {
    [self setAFixed32:other.aFixed32];
  }
  if (other.hasAFixed64) {
    [self setAFixed64:other.aFixed64];
  }
  if (other.hasASfixed32) {
    [self setASfixed32:other.aSfixed32];
  }
  if (other.hasASfixed64) {
    [self setASfixed64:other.aSfixed64];
  }
  if (other.hasABool) {
    [self setABool:other.aBool];
  }
  if (other.hasAString) {
    [self setAString:other.aString];
  }
  if (other.hasABytes) {
    [self setABytes:other.aBytes];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Animal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Animal_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setADouble:[input readDouble]];
        break;
      }
      case 21: {
        [self setAFloat:[input readFloat]];
        break;
      }
      case 24: {
        [self setAInt32:[input readInt32]];
        break;
      }
      case 32: {
        [self setAInt64:[input readInt64]];
        break;
      }
      case 40: {
        [self setAUint32:[input readUInt32]];
        break;
      }
      case 48: {
        [self setAUint64:[input readUInt64]];
        break;
      }
      case 56: {
        [self setASint32:[input readSInt32]];
        break;
      }
      case 64: {
        [self setASint64:[input readSInt64]];
        break;
      }
      case 77: {
        [self setAFixed32:[input readFixed32]];
        break;
      }
      case 81: {
        [self setAFixed64:[input readFixed64]];
        break;
      }
      case 93: {
        [self setASfixed32:[input readSFixed32]];
        break;
      }
      case 97: {
        [self setASfixed64:[input readSFixed64]];
        break;
      }
      case 104: {
        [self setABool:[input readBool]];
        break;
      }
      case 114: {
        [self setAString:[input readString]];
        break;
      }
      case 122: {
        [self setABytes:[input readData]];
        break;
      }
      case 128: {
        int32_t value = [input readEnum];
        if (Animal_VERSION_CURRENTIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:16 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasADouble {
  return result.hasADouble;
}
- (Float64) aDouble {
  return result.aDouble;
}
- (Animal_Builder*) setADouble:(Float64) value {
  result.hasADouble = YES;
  result.aDouble = value;
  return self;
}
- (Animal_Builder*) clearADouble {
  result.hasADouble = NO;
  result.aDouble = 0;
  return self;
}
- (BOOL) hasAFloat {
  return result.hasAFloat;
}
- (Float32) aFloat {
  return result.aFloat;
}
- (Animal_Builder*) setAFloat:(Float32) value {
  result.hasAFloat = YES;
  result.aFloat = value;
  return self;
}
- (Animal_Builder*) clearAFloat {
  result.hasAFloat = NO;
  result.aFloat = 0;
  return self;
}
- (BOOL) hasAInt32 {
  return result.hasAInt32;
}
- (int32_t) aInt32 {
  return result.aInt32;
}
- (Animal_Builder*) setAInt32:(int32_t) value {
  result.hasAInt32 = YES;
  result.aInt32 = value;
  return self;
}
- (Animal_Builder*) clearAInt32 {
  result.hasAInt32 = NO;
  result.aInt32 = 0;
  return self;
}
- (BOOL) hasAInt64 {
  return result.hasAInt64;
}
- (int64_t) aInt64 {
  return result.aInt64;
}
- (Animal_Builder*) setAInt64:(int64_t) value {
  result.hasAInt64 = YES;
  result.aInt64 = value;
  return self;
}
- (Animal_Builder*) clearAInt64 {
  result.hasAInt64 = NO;
  result.aInt64 = 0L;
  return self;
}
- (BOOL) hasAUint32 {
  return result.hasAUint32;
}
- (int32_t) aUint32 {
  return result.aUint32;
}
- (Animal_Builder*) setAUint32:(int32_t) value {
  result.hasAUint32 = YES;
  result.aUint32 = value;
  return self;
}
- (Animal_Builder*) clearAUint32 {
  result.hasAUint32 = NO;
  result.aUint32 = 0;
  return self;
}
- (BOOL) hasAUint64 {
  return result.hasAUint64;
}
- (int64_t) aUint64 {
  return result.aUint64;
}
- (Animal_Builder*) setAUint64:(int64_t) value {
  result.hasAUint64 = YES;
  result.aUint64 = value;
  return self;
}
- (Animal_Builder*) clearAUint64 {
  result.hasAUint64 = NO;
  result.aUint64 = 0L;
  return self;
}
- (BOOL) hasASint32 {
  return result.hasASint32;
}
- (int32_t) aSint32 {
  return result.aSint32;
}
- (Animal_Builder*) setASint32:(int32_t) value {
  result.hasASint32 = YES;
  result.aSint32 = value;
  return self;
}
- (Animal_Builder*) clearASint32 {
  result.hasASint32 = NO;
  result.aSint32 = 0;
  return self;
}
- (BOOL) hasASint64 {
  return result.hasASint64;
}
- (int64_t) aSint64 {
  return result.aSint64;
}
- (Animal_Builder*) setASint64:(int64_t) value {
  result.hasASint64 = YES;
  result.aSint64 = value;
  return self;
}
- (Animal_Builder*) clearASint64 {
  result.hasASint64 = NO;
  result.aSint64 = 0L;
  return self;
}
- (BOOL) hasAFixed32 {
  return result.hasAFixed32;
}
- (int32_t) aFixed32 {
  return result.aFixed32;
}
- (Animal_Builder*) setAFixed32:(int32_t) value {
  result.hasAFixed32 = YES;
  result.aFixed32 = value;
  return self;
}
- (Animal_Builder*) clearAFixed32 {
  result.hasAFixed32 = NO;
  result.aFixed32 = 0;
  return self;
}
- (BOOL) hasAFixed64 {
  return result.hasAFixed64;
}
- (int64_t) aFixed64 {
  return result.aFixed64;
}
- (Animal_Builder*) setAFixed64:(int64_t) value {
  result.hasAFixed64 = YES;
  result.aFixed64 = value;
  return self;
}
- (Animal_Builder*) clearAFixed64 {
  result.hasAFixed64 = NO;
  result.aFixed64 = 0L;
  return self;
}
- (BOOL) hasASfixed32 {
  return result.hasASfixed32;
}
- (int32_t) aSfixed32 {
  return result.aSfixed32;
}
- (Animal_Builder*) setASfixed32:(int32_t) value {
  result.hasASfixed32 = YES;
  result.aSfixed32 = value;
  return self;
}
- (Animal_Builder*) clearASfixed32 {
  result.hasASfixed32 = NO;
  result.aSfixed32 = 0;
  return self;
}
- (BOOL) hasASfixed64 {
  return result.hasASfixed64;
}
- (int64_t) aSfixed64 {
  return result.aSfixed64;
}
- (Animal_Builder*) setASfixed64:(int64_t) value {
  result.hasASfixed64 = YES;
  result.aSfixed64 = value;
  return self;
}
- (Animal_Builder*) clearASfixed64 {
  result.hasASfixed64 = NO;
  result.aSfixed64 = 0L;
  return self;
}
- (BOOL) hasABool {
  return result.hasABool;
}
- (BOOL) aBool {
  return result.aBool;
}
- (Animal_Builder*) setABool:(BOOL) value {
  result.hasABool = YES;
  result.aBool = value;
  return self;
}
- (Animal_Builder*) clearABool {
  result.hasABool = NO;
  result.aBool = NO;
  return self;
}
- (BOOL) hasAString {
  return result.hasAString;
}
- (NSString*) aString {
  return result.aString;
}
- (Animal_Builder*) setAString:(NSString*) value {
  result.hasAString = YES;
  result.aString = value;
  return self;
}
- (Animal_Builder*) clearAString {
  result.hasAString = NO;
  result.aString = @"";
  return self;
}
- (BOOL) hasABytes {
  return result.hasABytes;
}
- (NSData*) aBytes {
  return result.aBytes;
}
- (Animal_Builder*) setABytes:(NSData*) value {
  result.hasABytes = YES;
  result.aBytes = value;
  return self;
}
- (Animal_Builder*) clearABytes {
  result.hasABytes = NO;
  result.aBytes = [NSData data];
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (Animal_VERSION_CURRENT) type {
  return result.type;
}
- (Animal_Builder*) setType:(Animal_VERSION_CURRENT) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Animal_Builder*) clearType {
  result.hasType = NO;
  result.type = Animal_VERSION_CURRENTVer1;
  return self;
}
@end

